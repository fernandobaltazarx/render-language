{"version":3,"sources":["vendor/ember-cli/app-prefix.js","webrtc-translate/app.js","webrtc-translate/components/app-version.js","webrtc-translate/components/language-flag.js","webrtc-translate/components/language-select.js","webrtc-translate/components/message-item.js","webrtc-translate/components/message-list.js","webrtc-translate/components/speech-volume-oscillator.js","webrtc-translate/components/start-speech-recognition-button.js","webrtc-translate/controllers/array.js","webrtc-translate/controllers/object.js","webrtc-translate/controllers/room.js","webrtc-translate/helpers/is-equal.js","webrtc-translate/initializers/app-version.js","webrtc-translate/initializers/export-application-global.js","webrtc-translate/models/message.js","webrtc-translate/models/volume-analyser.js","webrtc-translate/router.js","webrtc-translate/routes/index.js","webrtc-translate/routes/room.js","webrtc-translate/services/speech-recognition.js","webrtc-translate/services/tour.js","webrtc-translate/templates/application.js","webrtc-translate/templates/components/language-select.js","webrtc-translate/templates/components/message-item.js","webrtc-translate/templates/components/message-list.js","webrtc-translate/templates/components/speech-volume-oscillator.js","webrtc-translate/templates/components/start-speech-recognition-button.js","webrtc-translate/templates/error.js","webrtc-translate/templates/room.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-config.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n\n/* jshint ignore:start */\n\n\n\n/* jshint ignore:end */\n","define('webrtc-translate/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'webrtc-translate/config/environment'], function (exports, _ember, _emberResolver, _emberLoadInitializers, _webrtcTranslateConfigEnvironment) {\n\n    var App;\n\n    _ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n    App = _ember['default'].Application.extend({\n        modulePrefix: _webrtcTranslateConfigEnvironment['default'].modulePrefix,\n        podModulePrefix: _webrtcTranslateConfigEnvironment['default'].podModulePrefix,\n        Resolver: _emberResolver['default']\n    });\n\n    (0, _emberLoadInitializers['default'])(App, _webrtcTranslateConfigEnvironment['default'].modulePrefix);\n\n    exports['default'] = App;\n});","define('webrtc-translate/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'webrtc-translate/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _webrtcTranslateConfigEnvironment) {\n\n  var name = _webrtcTranslateConfigEnvironment['default'].APP.name;\n  var version = _webrtcTranslateConfigEnvironment['default'].APP.version;\n\n  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({\n    version: version,\n    name: name\n  });\n});","define('webrtc-translate/components/language-flag', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Component.extend({\n        classNames: ['flag'],\n        classNameBindings: ['flagName'],\n\n        flagName: _ember['default'].computed('language', function () {\n            var language = this.get('language');\n\n            if (language) {\n                return language.split('-')[1].toUpperCase();\n            }\n        })\n    });\n});","define(\"webrtc-translate/components/language-select\", [\"exports\", \"ember\"], function (exports, _ember) {\n    exports[\"default\"] = _ember[\"default\"].Component.extend({\n        content: null,\n        selectedValue: null,\n\n        didInitAttrs: function didInitAttrs() {\n            this._super.apply(this, arguments);\n            var content = this.get(\"content\");\n\n            if (!content) {\n                this.set(\"content\", []);\n            }\n        },\n\n        actions: {\n            change: function change() {\n                var changeAction = this.get(\"action\");\n                var selectedEl = this.$(\"select\")[0];\n                var selectedIndex = selectedEl.selectedIndex;\n                var content = this.get(\"content\");\n                var selectedValue = content[selectedIndex];\n\n                this.set(\"selectedValue\", selectedValue);\n                changeAction(selectedValue);\n            }\n        }\n    });\n});","define('webrtc-translate/components/message-item', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Component.extend({\n        classNames: ['message'],\n        classNameBindings: ['message.isRemote:remote:local']\n    });\n});","define('webrtc-translate/components/message-list', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Component.extend({\n        classNames: ['chat'],\n        messages: [],\n\n        scrollChatToBottom: _ember['default'].observer('messages.[]', function () {\n            var element = this.$();\n\n            // Wait till the view is updated\n            if (element) {\n                _ember['default'].run.schedule('afterRender', function () {\n                    element.scrollTop(element.prop('scrollHeight'));\n                });\n            }\n        })\n    });\n});","define('webrtc-translate/components/speech-volume-oscillator', ['exports', 'ember', 'webrtc-translate/models/volume-analyser'], function (exports, _ember, _webrtcTranslateModelsVolumeAnalyser) {\n\n    // var injection = Ember.computed.injection;\n    var alias = _ember['default'].computed.alias;\n\n    // TODO: move volume calculations to a service\n    exports['default'] = _ember['default'].Component.extend({\n        isVisible: alias('isSpeechRecognitionActive'),\n\n        init: function init() {\n            this._super();\n\n            this.setProperties({\n                time: 0,\n                wavelength: 6,\n                speed: 2,\n                volumeAnalyser: _webrtcTranslateModelsVolumeAnalyser['default'].create()\n            });\n        },\n\n        onStreamChange: (function () {\n            var stream = this.get('stream');\n            this.get('volumeAnalyser').set('stream', stream);\n        }).observes('stream'),\n\n        draw: function draw() {\n            var canvas = this.$('canvas').get(0);\n            var ctx = canvas.getContext('2d');\n            var speed = this.get('speed');\n            var wavelength = this.get('wavelength');\n            var time = this.get('time');\n            var offset = canvas.height / 2;\n            var volume = this.get('volumeAnalyser.volume');\n            var amplitude = Math.max(volume / 2, 1.1);\n\n            function f(x) {\n                var xprime = x + speed * time;\n                return Math.sin(xprime / wavelength) * amplitude + offset;\n            }\n\n            // Clear\n            ctx.fillStyle = \"rgb(15, 15 ,15)\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            ctx.beginPath();\n            ctx.moveTo(0, f(0));\n            for (var x = 1; x < canvas.width; x++) {\n                ctx.lineTo(x, f(x));\n            }\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = \"rgb(68, 133, 247)\";\n            ctx.stroke();\n\n            this.set('time', time + 0.7);\n\n            var drawRAF = window.requestAnimationFrame(this.draw.bind(this));\n            this.set('drawRAF', drawRAF);\n        },\n\n        onIsSpeechRecognitionActiveChange: (function () {\n            var isActive = this.get('isSpeechRecognitionActive');\n            return isActive ? this.start() : this.stop();\n        }).observes('isSpeechRecognitionActive'),\n\n        start: function start() {\n            var drawRAF = window.requestAnimationFrame(this.draw.bind(this));\n            this.set('drawRAF', drawRAF);\n        },\n\n        stop: function stop() {\n            var drawRAF = this.get('drawRAF');\n\n            if (drawRAF) {\n                window.cancelAnimationFrame(drawRAF);\n            }\n        }\n    });\n});","define('webrtc-translate/components/start-speech-recognition-button', ['exports', 'ember'], function (exports, _ember) {\n\n    var inject = _ember['default'].inject;\n    var alias = _ember['default'].computed.alias;\n\n    exports['default'] = _ember['default'].Component.extend({\n        classNames: ['speech-recognition-button'],\n\n        recognition: inject.service('speech-recognition'),\n        isSpeechRecognitionActive: alias('recognition.isActive'),\n\n        flagName: (function () {\n            return this.get('language').split('-')[1].toUpperCase();\n        }).property('language'),\n\n        // TODO: make flag a separate component and toggle its\n        // 'isVisible' property instead.\n        onIsSpeechRecognitionActiveChange: (function () {\n            var isActive = this.get('isSpeechRecognitionActive');\n            var startButton = this.$('.flag');\n\n            return isActive ? startButton.hide() : startButton.show();\n        }).observes('isSpeechRecognitionActive'),\n\n        actions: {\n            // TODO: Wait for local video to be on\n            toggleRecognition: function toggleRecognition() {\n                var recognition = this.get(\"recognition\");\n\n                if (this.get(\"isSpeechRecognitionActive\")) {\n                    recognition.stop();\n                } else {\n                    recognition.start();\n                }\n            }\n        }\n    });\n});","define('webrtc-translate/controllers/array', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = _ember['default'].Controller;\n});","define('webrtc-translate/controllers/object', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = _ember['default'].Controller;\n});","define('webrtc-translate/controllers/room', ['exports', 'ember', 'webrtc-translate/models/message', 'webrtc-translate/config/environment'], function (exports, _ember, _webrtcTranslateModelsMessage, _webrtcTranslateConfigEnvironment) {\n\n    var inject = _ember['default'].inject;\n    var alias = _ember['default'].computed.alias;\n\n    exports['default'] = _ember['default'].Controller.extend({\n        isRemoteVideo: false,\n        isDataChannelOpened: false,\n        speechMessage: _webrtcTranslateModelsMessage['default'].create(),\n        chatMessage: _webrtcTranslateModelsMessage['default'].create(),\n\n        tour: inject.service('tour'),\n\n        recognition: inject.service('speech-recognition'),\n        isSpeechRecognitionActive: alias('recognition.isActive'),\n\n        localSpeechLanguage: 'en-GB',\n        localTranslationLanguage: _ember['default'].computed('localSpeechLanguage', function () {\n            return this.get('localSpeechLanguage').split('-')[0];\n        }),\n        localSpeechLanguageChanged: _ember['default'].observer('localSpeechLanguage', function () {\n            var language = this.get('localSpeechLanguage');\n\n            this.sendLanguage(language);\n            this.set('recognition.language', language);\n        }),\n\n        remoteSpeechLanguage: 'de-DE',\n        remoteTranslationLanguage: _ember['default'].computed('remoteSpeechLanguage', function () {\n            return this.get('remoteSpeechLanguage').split('-')[0];\n        }),\n\n        roomId: null,\n        roomIdChanged: _ember['default'].observer('roomId', function () {\n            console.log('Room ID: ', this.get('roomId'));\n\n            if (this.get('roomId')) {\n                this.setup();\n            }\n        }),\n\n        // TODO: Cleanup init and setup methods\n        init: function init() {\n            this._super();\n\n            var controller = this;\n\n            // Initialize WebRTC\n            var webrtc = new window.SimpleWebRTC({\n                enableDataChannels: true,\n                url: 'https://render-language.herokuapp.com:443',\n                debug: false\n            });\n\n            webrtc.webrtc.on('localStream', function (stream) {\n                console.log('localStream: ', stream);\n                controller.set('localMediaStream', stream);\n            });\n\n            webrtc.webrtc.on('localStreamStopped', function () {\n                console.log('localStreamStopped');\n                controller.set('localMediaStream', null);\n            });\n\n            webrtc.config.localVideoEl = \"local-video\";\n            webrtc.config.remoteVideosEl = \"remote-video\";\n\n            webrtc.startLocalVideo();\n\n            if (!window.localStorage.getItem('show-tour')) {\n                webrtc.on('readyToCall', function () {\n                    window.localStorage.setItem('show-tour', 'nope');\n                    controller.get('tour').start();\n                });\n            }\n\n            this.set('webrtc', webrtc);\n        },\n\n        setup: function setup() {\n            var _arguments = arguments;\n\n            var controller = this;\n            var webrtc = this.get('webrtc');\n            var recognition = this.get('recognition');\n\n            recognition.on('result', function (event) {\n                var interimTranscript = '';\n                var finalTranscript = '';\n                var messages = controller.get('messages');\n                var message = controller.get('speechMessage');\n\n                // TODO figure out a better way to add this message just once\n                if (!messages.contains(message)) {\n                    messages.pushObject(message);\n                }\n\n                for (var i = event.resultIndex; i < event.results.length; ++i) {\n                    var result = event.results[i];\n\n                    if (result.isFinal) {\n                        finalTranscript = result[0].transcript;\n                        console.log(\"Final: \", finalTranscript);\n                        break;\n                    } else {\n                        interimTranscript += result[0].transcript;\n                        console.log(\"Interim: \", interimTranscript);\n                    }\n                }\n\n                message.set('originalContent', interimTranscript);\n\n                if (finalTranscript) {\n                    message.setProperties({\n                        originalContent: finalTranscript,\n                        isFinal: true\n                    });\n                }\n\n                if (message.get('isFinal')) {\n                    controller.handleUntranslatedMessage(message)['finally'](function () {\n                        finalTranscript = '';\n                        controller.set('speechMessage', _webrtcTranslateModelsMessage['default'].create());\n                    });\n                }\n\n                console.log(event.results);\n            });\n\n            webrtc.on('readyToCall', function () {\n                webrtc.joinRoom(controller.get('roomId'));\n            });\n\n            webrtc.on('joinedRoom', function () {});\n\n            webrtc.on('error', function (error) {\n                switch (error) {\n                    case 'full':\n                        console.warn('You can\\'t join this room, because it\\'s full.');\n                        break;\n                    default:\n                        console.warn(error);\n                }\n            });\n\n            webrtc.on('videoAdded', function () {\n                controller.set('isRemoteVideo', true);\n            });\n\n            webrtc.on('videoRemoved', function () {\n                controller.set('isRemoteVideo', false);\n            });\n\n            webrtc.on('channelOpen', function (channel) {\n                // Data channel with label 'simplewebrtc' is opened by SimpleWebRTC by default\n                if (channel.label === 'simplewebrtc') {\n                    controller.set('isDataChannelOpened', true);\n                    console.info('Data channel opened.', _arguments);\n\n                    // Send local speech language to the other peer\n                    controller.sendLanguage(controller.get('localSpeechLanguage'));\n                }\n            });\n\n            webrtc.on('channelClose', function (channel) {\n                if (channel.label === 'simplewebrtc') {\n                    controller.set('isDataChannelOpened', false);\n                    console.info('Data channel closed.', _arguments);\n                }\n            });\n\n            webrtc.on('channelError', function (channel) {\n                if (channel.label === 'simplewebrtc') {\n                    controller.set('isDataChannelOpened', false);\n                    console.info('Data channel error.', _arguments);\n                }\n            });\n\n            webrtc.on('channelMessage', function (peer, channelName, data) {\n                if (channelName === 'simplewebrtc') {\n                    var payload = data.payload;\n\n                    switch (data.type) {\n                        case 'message':\n                            payload.isRemote = true;\n                            payload.ifFinal = true;\n\n                            var message = _webrtcTranslateModelsMessage['default'].create(payload);\n                            controller.get('messages').pushObject(message);\n\n                            controller.say({\n                                text: message.get('translatedContent'),\n                                lang: controller.get('localSpeechLanguage')\n                            });\n                            break;\n\n                        case 'language':\n                            controller.set('remoteSpeechLanguage', payload.language);\n                            break;\n                    }\n\n                    console.log('Got message: ', data);\n                }\n            });\n        },\n\n        handleUntranslatedMessage: function handleUntranslatedMessage(message) {\n            var _this = this;\n\n            var promise = null;\n\n            if (this.get('isDataChannelOpened')) {\n                promise = this.translate({\n                    source: this.get('localTranslationLanguage'),\n                    target: this.get('remoteTranslationLanguage'),\n                    q: message.get('formattedOriginalContent')\n                }).then(function (data) {\n                    if (data.error) {\n                        console.error(data.error.message);\n                    } else {\n                        var translation = data.data.translations[0].translatedText;\n                        message.set('translatedContent', translation);\n                        _this.sendMessage(message);\n                    }\n\n                    return message;\n                });\n            } else {\n                promise = _ember['default'].RSVP.resolve(message);\n            }\n\n            return promise;\n        },\n\n        translate: function translate(options) {\n            // Wrap jQuery promise in RSVP promise\n            return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n                _ember['default'].$.getJSON('https://www.googleapis.com/language/translate/v2?callback=?', {\n                    key: _webrtcTranslateConfigEnvironment['default'].GOOGLE_TRANSLATE_API_KEY,\n                    source: options.source,\n                    target: options.target,\n                    q: options.q\n                }).then(resolve, reject);\n            });\n        },\n\n        say: function say(options) {\n            var msg = new window.SpeechSynthesisUtterance();\n            msg.lang = options.lang;\n            msg.text = options.text;\n\n            window.speechSynthesis.speak(msg);\n        },\n\n        sendMessage: function sendMessage(message) {\n            var webrtc = this.get('webrtc');\n\n            webrtc.sendDirectlyToAll('simplewebrtc', 'message', {\n                originalContent: message.get('formattedOriginalContent'),\n                translatedContent: message.get('translatedContent')\n            });\n        },\n\n        sendLanguage: function sendLanguage(language) {\n            var webrtc = this.get('webrtc');\n\n            webrtc.sendDirectlyToAll('simplewebrtc', 'language', {\n                language: language\n            });\n        },\n\n        actions: {\n            handleChatMessage: function handleChatMessage() {\n                var _this2 = this;\n\n                var message = this.get('chatMessage');\n\n                if (message.originalContent) {\n                    message.set('isFinal', true);\n                    this.get('messages').pushObject(message);\n\n                    this.handleUntranslatedMessage(message).then(function () {\n                        _this2.set('chatMessage', _webrtcTranslateModelsMessage['default'].create());\n                    });\n                }\n            }\n        }\n    });\n});","define(\"webrtc-translate/helpers/is-equal\", [\"exports\", \"ember\"], function (exports, _ember) {\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\n    exports[\"default\"] = _ember[\"default\"].Helper.helper(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        var leftSide = _ref2[0];\n        var rightSide = _ref2[1];\n\n        return leftSide === rightSide;\n    });\n});","define('webrtc-translate/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'webrtc-translate/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _webrtcTranslateConfigEnvironment) {\n  exports['default'] = {\n    name: 'App Version',\n    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_webrtcTranslateConfigEnvironment['default'].APP.name, _webrtcTranslateConfigEnvironment['default'].APP.version)\n  };\n});","define('webrtc-translate/initializers/export-application-global', ['exports', 'ember', 'webrtc-translate/config/environment'], function (exports, _ember, _webrtcTranslateConfigEnvironment) {\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (_webrtcTranslateConfigEnvironment['default'].exportApplicationGlobal !== false) {\n      var theGlobal;\n      if (typeof window !== 'undefined') {\n        theGlobal = window;\n      } else if (typeof global !== 'undefined') {\n        theGlobal = global;\n      } else if (typeof self !== 'undefined') {\n        theGlobal = self;\n      } else {\n        // no reasonable global, just bail\n        return;\n      }\n\n      var value = _webrtcTranslateConfigEnvironment['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = _ember['default'].String.classify(_webrtcTranslateConfigEnvironment['default'].modulePrefix);\n      }\n\n      if (!theGlobal[globalName]) {\n        theGlobal[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete theGlobal[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n});","define('webrtc-translate/models/message', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Object.extend({\n        originalContent: null,\n        translatedContent: null,\n        isFinal: false,\n        isRemote: false,\n\n        formattedOriginalContent: (function () {\n            var content = this.get('originalContent'),\n                isFinal = this.get('isFinal');\n\n            return isFinal ? this.capitalize(content) : content;\n        }).property('originalContent', 'ifFinal'),\n\n        capitalize: function capitalize(string) {\n            var first_char = /\\S/;\n            return string.replace(first_char, function (match) {\n                return match.toUpperCase();\n            });\n        },\n\n        linebreak: function linebreak(string) {\n            var two_line = /\\n\\n/g;\n            var one_line = /\\n/g;\n\n            return string.replace(two_line, '<p></p>').replace(one_line, '<br>');\n        }\n    });\n});","define('webrtc-translate/models/volume-analyser', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Object.extend({\n        stream: null,\n\n        onStreamChange: (function () {\n            var stream = this.get('stream');\n\n            if (stream) {\n                var AudioContext = window.AudioContext || window.webkitAudioContext;\n                var context = new AudioContext();\n                var analyser = context.createAnalyser();\n                analyser.fftSize = 128;\n\n                // TODO check what these exactly do\n                analyser.minDecibels = -90;\n                analyser.maxDecibels = -10;\n                analyser.smoothingTimeConstant = 0.85;\n\n                var source = context.createMediaStreamSource(stream);\n                source.connect(analyser);\n\n                this.set('analyser', analyser);\n                this.set('bufferLength', analyser.fftSize);\n            } else {}\n        }).observes('stream'),\n\n        volume: (function () {\n            var stream = this.get('stream');\n\n            if (stream) {\n                var analyser = this.get('analyser');\n                var bufferLength = this.get('bufferLength');\n                var dataArray = new Uint8Array(bufferLength);\n                analyser.getByteTimeDomainData(dataArray);\n\n                // Return volume in range 0..64\n                var volume = Math.max.apply(null, dataArray) - 128;\n                volume = Math.max(volume, 0);\n                volume = Math.min(volume, 64);\n                return volume;\n            } else {\n                return null;\n            }\n        }).property().volatile().readOnly()\n    });\n});","define('webrtc-translate/router', ['exports', 'ember', 'webrtc-translate/config/environment'], function (exports, _ember, _webrtcTranslateConfigEnvironment) {\n\n  var Router = _ember['default'].Router.extend({\n    location: _webrtcTranslateConfigEnvironment['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route('room', { path: '/rooms/:room_id' });\n  });\n\n  exports['default'] = Router;\n});","define('webrtc-translate/routes/index', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Route.extend({\n        beforeModel: function beforeModel() {\n            function uuid() {\n                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                    var r = Math.random() * 16 | 0,\n                        v = c === 'x' ? r : r & 0x3 | 0x8;\n                    return v.toString(16);\n                });\n            }\n\n            this.transitionTo('room', uuid());\n        }\n    });\n});","define('webrtc-translate/routes/room', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Route.extend({\n        beforeModel: function beforeModel() {\n            var supports = {\n                webRTC: !!(window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection),\n                webSpeech: !!(window.SpeechRecognition || window.webkitSpeechRecognition),\n                webAudio: !!window.AudioContext\n            };\n\n            if (!(supports.webRTC && supports.webSpeech && supports.webAudio)) {\n                return _ember['default'].RSVP.reject();\n            }\n        },\n\n        model: function model(params) {\n            return {\n                roomId: params.room_id,\n                messages: []\n            };\n        },\n\n        setupController: function setupController(controller, model) {\n            controller.setProperties(model);\n        }\n    });\n});","define('webrtc-translate/services/speech-recognition', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Service.extend(_ember['default'].Evented, {\n        isActive: false,\n        languages: ['en-GB', 'en-US', 'de-DE', 'es-ES', 'fr-FR', 'it-IT', 'hu-HU', 'nl-NL', 'pl-PL', 'pt-PT', 'sk-SK', 'sv-SE'],\n        language: 'en-GB',\n\n        init: function init() {\n            this._super();\n\n            var self = this;\n            var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n            var recognition = new SpeechRecognition();\n\n            recognition.continuous = false;\n            recognition.interimResults = true;\n            recognition.lang = this.get(\"language\");\n\n            recognition.onstart = function () {\n                console.info('recognition:start');\n                self.set(\"isActive\", true);\n                self.trigger(\"start\");\n            };\n\n            recognition.onresult = function (event) {\n                console.info('recognition:result', event);\n                self.trigger(\"result\", event);\n\n                // Stop recognition once there's final result\n                var results = event.results;\n                if (results.length) {\n                    if (results[0].isFinal) {\n                        recognition.abort();\n                    }\n                }\n            };\n\n            recognition.onend = function (event) {\n                console.info('recognition:end', event);\n                self.set(\"isActive\", false);\n                self.trigger(\"end\", event);\n            };\n\n            recognition.onerror = function () {\n                console.info('recognition:error', event);\n                self.set(\"isActive\", false);\n                self.trigger(\"error\", event);\n            };\n\n            this.set(\"recognition\", recognition);\n        },\n\n        start: function start() {\n            this.get(\"recognition\").start();\n        },\n\n        stop: function stop() {\n            this.get(\"recognition\").stop();\n        },\n\n        languageHasChanged: (function () {\n            var language = this.get(\"language\");\n            var recognition = this.get(\"recognition\");\n\n            recognition.lang = language;\n\n            if (this.get('isActive')) {\n                recognition.stop();\n                recognition.start();\n            }\n        }).observes(\"language\")\n    });\n});","define('webrtc-translate/services/tour', ['exports', 'ember'], function (exports, _ember) {\n    exports['default'] = _ember['default'].Service.extend({\n        init: function init() {\n            this._super();\n\n            var tour = new window.Shepherd.Tour({\n                defaults: {\n                    classes: 'shepherd-theme-arrows shepherd-element-aint-no-river-wide-enough'\n                }\n            });\n\n            tour.addStep('step-1', {\n                title: 'Welcome to Render.Language!',\n                text: 'This app allows you to have a 1-to-1 video call and will translate what the other person is saying.',\n                buttons: [{\n                    text: 'Next',\n                    action: tour.next\n                }]\n            });\n\n            tour.addStep('step-2', {\n                text: 'Click to select the language you speak in.',\n                attachTo: '.language-local',\n                buttons: [{\n                    text: 'Back',\n                    action: tour.back\n                }, {\n                    text: 'Next',\n                    action: tour.next\n                }]\n            });\n\n            tour.addStep('step-3', {\n                text: 'See the language the other person speaks in.',\n                attachTo: '.language-remote',\n                buttons: [{\n                    text: 'Back',\n                    action: tour.back\n                }, {\n                    text: 'Next',\n                    action: tour.next\n                }]\n            });\n\n            tour.addStep('step-4', {\n                text: \"<p><b>After the other person connects</b>, click here to start speech recognition. It will stop automatically when you stop speaking.</p><p>When doing it for the first time, you'll need to allow mic access.</p>\",\n                attachTo: {\n                    element: '.speech-recognition-button',\n                    on: 'bottom'\n                },\n                buttons: [{\n                    text: 'Back',\n                    action: tour.back\n                }, {\n                    text: 'Next',\n                    action: tour.next\n                }]\n            });\n\n            tour.addStep('step-5', {\n                title: \"That's it!\",\n                text: \"<p>Send address of this page to another person to get started.</p>\",\n                buttons: [{\n                    text: 'Back',\n                    action: tour.back\n                }, {\n                    text: 'Okay, got it!',\n                    action: tour.next\n                }]\n            });\n\n            this.tour = tour;\n        },\n\n        start: function start() {\n            this.tour.start();\n        }\n    });\n});","define(\"webrtc-translate/templates/application\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"triple-curlies\"\n        },\n        \"revision\": \"Ember@2.4.6\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 4,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"webrtc-translate/templates/application.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"container\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);\n        return morphs;\n      },\n      statements: [[\"content\", \"outlet\", [\"loc\", [null, [2, 2], [2, 12]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","define(\"webrtc-translate/templates/components/language-select\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    var child0 = (function () {\n      return {\n        meta: {\n          \"fragmentReason\": false,\n          \"revision\": \"Ember@2.4.6\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 2,\n              \"column\": 2\n            },\n            \"end\": {\n              \"line\": 6,\n              \"column\": 2\n            }\n          },\n          \"moduleName\": \"webrtc-translate/templates/components/language-select.hbs\"\n        },\n        isEmpty: false,\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"option\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var element0 = dom.childAt(fragment, [1]);\n          var morphs = new Array(3);\n          morphs[0] = dom.createAttrMorph(element0, 'value');\n          morphs[1] = dom.createAttrMorph(element0, 'selected');\n          morphs[2] = dom.createMorphAt(element0, 1, 1);\n          return morphs;\n        },\n        statements: [[\"attribute\", \"value\", [\"concat\", [[\"get\", \"item\", [\"loc\", [null, [3, 21], [3, 25]]]]]]], [\"attribute\", \"selected\", [\"subexpr\", \"is-equal\", [[\"get\", \"item\", [\"loc\", [null, [3, 49], [3, 53]]]], [\"get\", \"selectedValue\", [\"loc\", [null, [3, 54], [3, 67]]]]], [], [\"loc\", [null, [3, 38], [3, 69]]]]], [\"content\", \"item\", [\"loc\", [null, [4, 6], [4, 14]]]]],\n        locals: [\"item\"],\n        templates: []\n      };\n    })();\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"modifiers\",\n          \"modifiers\": [\"action\"]\n        },\n        \"revision\": \"Ember@2.4.6\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 8,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"webrtc-translate/templates/components/language-select.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"select\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element1 = dom.childAt(fragment, [0]);\n        var morphs = new Array(2);\n        morphs[0] = dom.createElementMorph(element1);\n        morphs[1] = dom.createMorphAt(element1, 1, 1);\n        return morphs;\n      },\n      statements: [[\"element\", \"action\", [\"change\"], [\"on\", \"change\"], [\"loc\", [null, [1, 8], [1, 39]]]], [\"block\", \"each\", [[\"get\", \"content\", [\"loc\", [null, [2, 10], [2, 17]]]]], [\"key\", \"@index\"], 0, null, [\"loc\", [null, [2, 2], [6, 11]]]]],\n      locals: [],\n      templates: [child0]\n    };\n  })());\n});","define(\"webrtc-translate/templates/components/message-item\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"multiple-nodes\"]\n        },\n        \"revision\": \"Ember@2.4.6\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 11,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"webrtc-translate/templates/components/message-item.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"content-wrapper\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"content-wrapper\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element0 = dom.childAt(fragment, [0, 1]);\n        var element1 = dom.childAt(fragment, [2, 1]);\n        var morphs = new Array(4);\n        morphs[0] = dom.createAttrMorph(element0, 'class');\n        morphs[1] = dom.createUnsafeMorphAt(element0, 1, 1);\n        morphs[2] = dom.createAttrMorph(element1, 'class');\n        morphs[3] = dom.createUnsafeMorphAt(element1, 1, 1);\n        return morphs;\n      },\n      statements: [[\"attribute\", \"class\", [\"concat\", [\"content original-content \", [\"subexpr\", \"if\", [[\"get\", \"message.originalContent\", [\"loc\", [null, [2, 45], [2, 68]]]], \"visible\", \"hidden\"], [], [\"loc\", [null, [2, 40], [2, 89]]]]]]], [\"content\", \"message.formattedOriginalContent\", [\"loc\", [null, [3, 4], [3, 42]]]], [\"attribute\", \"class\", [\"concat\", [\"content translated-content \", [\"subexpr\", \"if\", [[\"get\", \"message.translatedContent\", [\"loc\", [null, [7, 47], [7, 72]]]], \"visible\", \"hidden\"], [], [\"loc\", [null, [7, 42], [7, 93]]]]]]], [\"content\", \"message.translatedContent\", [\"loc\", [null, [8, 4], [8, 35]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","define(\"webrtc-translate/templates/components/message-list\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    var child0 = (function () {\n      return {\n        meta: {\n          \"fragmentReason\": {\n            \"name\": \"missing-wrapper\",\n            \"problems\": [\"wrong-type\"]\n          },\n          \"revision\": \"Ember@2.4.6\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 1,\n              \"column\": 0\n            },\n            \"end\": {\n              \"line\": 3,\n              \"column\": 0\n            }\n          },\n          \"moduleName\": \"webrtc-translate/templates/components/message-list.hbs\"\n        },\n        isEmpty: false,\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [[\"inline\", \"message-item\", [], [\"message\", [\"subexpr\", \"@mut\", [[\"get\", \"message\", [\"loc\", [null, [2, 25], [2, 32]]]]], [], []]], [\"loc\", [null, [2, 2], [2, 34]]]]],\n        locals: [\"message\"],\n        templates: []\n      };\n    })();\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"wrong-type\"]\n        },\n        \"revision\": \"Ember@2.4.6\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 4,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"webrtc-translate/templates/components/message-list.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n        dom.insertBoundary(fragment, 0);\n        dom.insertBoundary(fragment, null);\n        return morphs;\n      },\n      statements: [[\"block\", \"each\", [[\"get\", \"messages\", [\"loc\", [null, [1, 8], [1, 16]]]]], [], 0, null, [\"loc\", [null, [1, 0], [3, 9]]]]],\n      locals: [],\n      templates: [child0]\n    };\n  })());\n});","define(\"webrtc-translate/templates/components/speech-volume-oscillator\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"triple-curlies\"\n        },\n        \"revision\": \"Ember@2.4.6\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"webrtc-translate/templates/components/speech-volume-oscillator.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"canvas\");\n        dom.setAttribute(el1, \"width\", \"64\");\n        dom.setAttribute(el1, \"height\", \"64\");\n        dom.setAttribute(el1, \"class\", \"circle center\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes() {\n        return [];\n      },\n      statements: [],\n      locals: [],\n      templates: []\n    };\n  })());\n});","define(\"webrtc-translate/templates/components/start-speech-recognition-button\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"modifiers\",\n          \"modifiers\": [\"action\"]\n        },\n        \"revision\": \"Ember@2.4.6\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 5,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"webrtc-translate/templates/components/start-speech-recognition-button.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1]);\n        var morphs = new Array(3);\n        morphs[0] = dom.createElementMorph(element0);\n        morphs[1] = dom.createAttrMorph(element1, 'class');\n        morphs[2] = dom.createMorphAt(element0, 3, 3);\n        return morphs;\n      },\n      statements: [[\"element\", \"action\", [\"toggleRecognition\"], [], [\"loc\", [null, [1, 5], [1, 35]]]], [\"attribute\", \"class\", [\"concat\", [\"flag circle center \", [\"get\", \"flagName\", [\"loc\", [null, [2, 35], [2, 43]]]]]]], [\"inline\", \"speech-volume-oscillator\", [], [\"stream\", [\"subexpr\", \"@mut\", [[\"get\", \"stream\", [\"loc\", [null, [3, 36], [3, 42]]]]], [], []], \"isSpeechRecognitionActive\", [\"subexpr\", \"@mut\", [[\"get\", \"isSpeechRecognitionActive\", [\"loc\", [null, [3, 69], [3, 94]]]]], [], []]], [\"loc\", [null, [3, 2], [3, 96]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","define(\"webrtc-translate/templates/error\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"triple-curlies\"\n        },\n        \"revision\": \"Ember@2.4.6\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 5,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"webrtc-translate/templates/error.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"vertical-center text-center\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h1\");\n        var el3 = dom.createTextNode(\"Unfortunately, your browser is currently not supported.\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h1\");\n        var el3 = dom.createTextNode(\"Consider using the latest version of \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"a\");\n        dom.setAttribute(el3, \"href\", \"http://chrome.com\");\n        var el4 = dom.createTextNode(\"Google Chrome\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\".\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes() {\n        return [];\n      },\n      statements: [],\n      locals: [],\n      templates: []\n    };\n  })());\n});","define(\"webrtc-translate/templates/room\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\"multiple-nodes\", \"wrong-type\"]\n        },\n        \"revision\": \"Ember@2.4.6\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 34,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"webrtc-translate/templates/room.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"row\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2, \"class\", \"col-sm-3 text-center\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3, \"class\", \"language language-local\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4, \"class\", \"language-select\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2, \"class\", \"col-sm-6 text-center\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4, \"id\", \"local-video\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4, \"id\", \"remote-video\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2, \"class\", \"col-sm-3 text-center\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3, \"class\", \"language language-remote\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"hr\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"form\");\n        dom.setAttribute(el1, \"class\", \"chat-form text-center\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1, 1, 1]);\n        var element2 = dom.childAt(element0, [3]);\n        var element3 = dom.childAt(element2, [1]);\n        var element4 = dom.childAt(element0, [5, 1, 1]);\n        var element5 = dom.childAt(fragment, [6]);\n        var morphs = new Array(9);\n        morphs[0] = dom.createMorphAt(element1, 1, 1);\n        morphs[1] = dom.createMorphAt(element1, 3, 3);\n        morphs[2] = dom.createAttrMorph(element3, 'class');\n        morphs[3] = dom.createMorphAt(element2, 3, 3);\n        morphs[4] = dom.createMorphAt(element4, 1, 1);\n        morphs[5] = dom.createMorphAt(element4, 3, 3);\n        morphs[6] = dom.createMorphAt(fragment, 2, 2, contextualElement);\n        morphs[7] = dom.createElementMorph(element5);\n        morphs[8] = dom.createMorphAt(element5, 1, 1);\n        return morphs;\n      },\n      statements: [[\"inline\", \"language-select\", [], [\"content\", [\"subexpr\", \"@mut\", [[\"get\", \"recognition.languages\", [\"loc\", [null, [5, 34], [5, 55]]]]], [], []], \"action\", [\"subexpr\", \"action\", [[\"subexpr\", \"mut\", [[\"get\", \"localSpeechLanguage\", [\"loc\", [null, [5, 76], [5, 95]]]]], [], [\"loc\", [null, [5, 71], [5, 96]]]]], [], [\"loc\", [null, [5, 63], [5, 97]]]]], [\"loc\", [null, [5, 8], [5, 99]]]], [\"inline\", \"language-flag\", [], [\"language\", [\"subexpr\", \"@mut\", [[\"get\", \"localSpeechLanguage\", [\"loc\", [null, [6, 33], [6, 52]]]]], [], []]], [\"loc\", [null, [6, 8], [6, 54]]]], [\"attribute\", \"class\", [\"concat\", [\"videos \", [\"subexpr\", \"if\", [[\"get\", \"isRemoteVideo\", [\"loc\", [null, [11, 28], [11, 41]]]], \"remote-video-on\", \"remote-video-off\"], [], [\"loc\", [null, [11, 23], [11, 80]]]]]]], [\"inline\", \"start-speech-recognition-button\", [], [\"language\", [\"subexpr\", \"@mut\", [[\"get\", \"localSpeechLanguage\", [\"loc\", [null, [15, 47], [15, 66]]]]], [], []], \"stream\", [\"subexpr\", \"@mut\", [[\"get\", \"localMediaStream\", [\"loc\", [null, [15, 74], [15, 90]]]]], [], []]], [\"loc\", [null, [15, 4], [15, 92]]]], [\"content\", \"remoteSpeechLanguage\", [\"loc\", [null, [20, 8], [20, 32]]]], [\"inline\", \"language-flag\", [], [\"language\", [\"subexpr\", \"@mut\", [[\"get\", \"remoteSpeechLanguage\", [\"loc\", [null, [21, 33], [21, 53]]]]], [], []]], [\"loc\", [null, [21, 8], [21, 55]]]], [\"inline\", \"message-list\", [], [\"messages\", [\"subexpr\", \"@mut\", [[\"get\", \"messages\", [\"loc\", [null, [27, 24], [27, 32]]]]], [], []]], [\"loc\", [null, [27, 0], [27, 34]]]], [\"element\", \"action\", [\"handleChatMessage\"], [\"on\", \"submit\"], [\"loc\", [null, [31, 6], [31, 48]]]], [\"inline\", \"input\", [], [\"value\", [\"subexpr\", \"@mut\", [[\"get\", \"chatMessage.originalContent\", [\"loc\", [null, [32, 16], [32, 43]]]]], [], []], \"placeholder\", \"Type a message here\"], [\"loc\", [null, [32, 2], [32, 79]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","/* jshint ignore:start */\n\n\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('webrtc-translate/config/environment', ['ember'], function(Ember) {\n  var prefix = 'webrtc-translate';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\nif (!runningTests) {\n  require(\"webrtc-translate/app\")[\"default\"].create({\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true,\"name\":\"webrtc-translate\",\"version\":\"0.0.0+2c1a0be0\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfpbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtjpxznKA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"webrtc-translate.js"}